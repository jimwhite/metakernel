name: "Publish Release from PR Branch"

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g., v0.30.3.1)"
        required: true
      prerelease:
        description: "Mark as pre-release"
        required: false
        type: boolean
        default: false
  # Also trigger when a tag matching v*.*.* is pushed
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build hatchling twine

      - name: Build package
        run: |
          # Try with isolation first, fall back to no-isolation if network issues
          python -m build || python -m build --no-isolation
          ls -lh dist/

      - name: Check distribution
        run: |
          twine check dist/*

      - name: Generate checksums
        run: |
          cd dist
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Extract version from tag
        id: version
        run: |
          # Get tag from workflow input or from git ref
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          VERSION="${TAG#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
          echo "Tag: ${TAG}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: ${{ steps.version.outputs.tag }}
          body: |
            ## Release ${{ steps.version.outputs.version }}
            
            This release includes bug fixes and improvements.
            
            ### Installation
            
            ```bash
            pip install metakernel==${{ steps.version.outputs.version }}
            ```
            
            Or install from source:
            
            ```bash
            pip install https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/metakernel-${{ steps.version.outputs.version }}.tar.gz
            ```
            
            ### Checksums
            
            See the attached `checksums.txt` file for SHA256 checksums of all artifacts.
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}

      - name: Upload wheel
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/metakernel-${{ steps.version.outputs.version }}-py3-none-any.whl
          asset_name: metakernel-${{ steps.version.outputs.version }}-py3-none-any.whl
          asset_content_type: application/x-wheel+zip

      - name: Upload source distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/metakernel-${{ steps.version.outputs.version }}.tar.gz
          asset_name: metakernel-${{ steps.version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain

      - name: Release created
        run: |
          echo "âœ… Release ${{ steps.version.outputs.tag }} created successfully!"
          echo "Release URL: ${{ steps.create_release.outputs.html_url }}"
